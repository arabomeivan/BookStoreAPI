name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, develop]

jobs:
  TestApplicationFunctionality:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5
    env:
      # Point to the locally running MongoDB service
      MONGODB_URL: mongodb://127.0.0.1:27017/bookstore_test
      # include other secrets if needed, e.g. JWT_SECRET
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 16 and cache npm
        uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for MongoDB to be healthy
        run: |
          echo "Waiting for MongoDB to be ready..."
          for i in {1..30}; do
            if mongo --host localhost --eval "db.runCommand({ ping: 1 })" >/dev/null 2>&1; then
              echo "MongoDB is up"
              break
            fi
            echo "MongoDB not ready yet, retrying..."
            sleep 2
          done

      - name:  Seed test data
        run: |
          # If you have a seeding script, invoke it here.
          # Example: node scripts/seedTestData.js
          echo "Skipping seeding unless script exists."

      - name: Start backend server in background
        run: |
          npm start &
          # wait for the server to become reachable
          n=0
          until curl --silent --fail http://localhost:5000/health || [ $n -ge 30 ]; do
            echo "Waiting for backend to be up..."
            n=$((n+1))
            sleep 2
          done
          if [ $n -ge 30 ]; then
            echo "Backend did not start in time" >&2
            exit 1
          fi

      - name: Run Cypress API tests
        run: npm run test

  DeployChanges:
    needs: TestApplicationFunctionality
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render Deployment
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"
